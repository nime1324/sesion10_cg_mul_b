<!DOCTYPE html >
    <html>
    <head>
    <meta charset = "utf-8"/>
    <style>
    body {
        background - color: #ffffff;
        margin: 0;
        overflow: hidden;
    } </style> </head>
    <body>
    <button>Aceptar</button>
<!--- https://ajax.googleapis.com/ajax/libs/threejs/r76/three.min.js -->
<script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/95/three.min.js"> </script>
<script>
var camera, scene, renderer;
var geometria, material, mesh;
var clock;

function cubo(x, y, z, px, py, pz, material, color, wf) {
	geometria = new THREE.CubeGeometry(x, y, z);
    switch(material) {
    	case 'Basic': material = new THREE.MeshBasicMaterial({color: color, wireframe: wf}); break;
    	case 'Standard': material = new THREE.MeshStandardMaterial({color: color, wireframe: wf}); break;
    	case 'Physical': material = new THREE.MesPhysicalMaterial({color: color, wireframe: wf}); break;
    	case 'Phong': material = new THREE.MeshPhongMaterial({color: color, wireframe: wf}); break;
    	case 'Lambert': material = new THREE.MeshLambertMaterial({color: color, wireframe: wf}); break;
    }
    cube = new THREE.Mesh(geometria, material);
    scene.add(cube);
    cube.position.set(px, py, pz);

    return cube;
}

function init() {
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth*0.99, window.innerHeight*0.99);
    document.body.appendChild(renderer.domElement);
    scene = new THREE.Scene();
    var arrCube = [];

    var t = 2.2;
    for (var i = 0; i < 3; i++) {
        r = (Math.PI/2)   
        d = t * 1.05
        arrCube.push(cubo(t, t, t, 0, 0, 0, 'Basic', (i==0 ? 'red': i==1 ? 'green' : 'blue'), false));

        arrCube[i].geometry.translate((i==0)*d, (i==1)*d, (i==2)*d)
        if (i==0){
<!DOCTYPE html >
    <html>
    <head>
    <meta charset = "utf-8"/>
    <style>
    body {
        background - color: #ffffff;
        margin: 0;
        overflow: hidden;
    } </style> </head>
    <body>
    <button>Aceptar</button>
<!--- https://ajax.googleapis.com/ajax/libs/threejs/r76/three.min.js -->
<script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/95/three.min.js"> </script>
<script>
var camera, scene, renderer;
var geometria, material, mesh;
var clock;

function cubo(x, y, z, px, py, pz, material, color, wf) {
	geometria = new THREE.CubeGeometry(x, y, z);
    switch(material) {
    	case 'Basic': material = new THREE.MeshBasicMaterial({color: color, wireframe: wf}); break;
    	case 'Standard': material = new THREE.MeshStandardMaterial({color: color, wireframe: wf}); break;
    	case 'Physical': material = new THREE.MesPhysicalMaterial({color: color, wireframe: wf}); break;
    	case 'Phong': material = new THREE.MeshPhongMaterial({color: color, wireframe: wf}); break;
    	case 'Lambert': material = new THREE.MeshLambertMaterial({color: color, wireframe: wf}); break;
    }
    cube = new THREE.Mesh(geometria, material);
    scene.add(cube);
    cube.position.set(px, py, pz);

    return cube;
}

function init() {
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth*0.99, window.innerHeight*0.99);
    document.body.appendChild(renderer.domElement);
    scene = new THREE.Scene();
    var arrCube = [];

    var t = 2.2;
    for (var i = 0; i < 3; i++) {
        d = t * 1.05
	r = Math.PI/2
        arrCube.push(cubo(t, t, t, 0, 0, 0, 'Basic', (i==0 ? 'red': i==1 ? 'green' : 'blue'), false));
        


        arrCube[i].geometry.translate((i==0)*d, (i==1)*d, (i==2)*d)
	if (i == 0){
		arrCube[i].rotateZ(r)
		   }  
    }


    const axesHelper = new THREE.AxesHelper(10);
    scene.add(axesHelper);

    camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 100);
    camera.position.set(4, 2, 4);
    camera.lookAt(arrCube[2].position);
    clock = new THREE.Clock();
    window.addEventListener('resize', onWindowResize, false);
}

var dir = 1;

function onWindowResize() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

init();
renderer.render(scene, camera);
</script>
</body>
</html>